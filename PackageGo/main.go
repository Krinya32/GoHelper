package main // Говорю что это пакет main, в нем определена функция main
import (
	"PackageGo/rectangle" // Прописываем путь до пакета rectangle
	"fmt"
)

//0. Разделяющя область видимости, уровня одного пакета

//1. В этом примере 2 модуля (main и calculator) помещены в одну директорию packageGO
//2. Говорят, что модули main u calculate назодятся в одном пакете (в одной директории)

//3. Разделяющая область видимости
//Все, что впринципе находится внутри данного пакета, доступно из любого модуля без импортирования
func main() {
	// Данные функции видны компилятору за счет того, что они реализованы внутри модуля calculator, который входит в состав пакета main
	// resAdd := Add(10, 20) // В этой ситуации лишние импортивы не нужны!!!!!
	// resSub := Sub(30, 40)
	// resMult := Mult(50, 4)
	// resDiv := Div(40, 4)
	// fmt.Println(resAdd, resSub, resMult, resDiv)
	//4. Для того чтобы запустить все файлы в пакете надо выполнить:
	//* go run main.go go run calculate.go
	//* go build  main.go calculate.goo calculator.go
	//* go install main.go calculator.go

	//5. Вы обратили внимание, что функции которые затаскиваются в main начинаются с большой буквы. В Go принято, если имя сущности (переменная, функция, поля в структуре, структура, метод, интерфейс и т.д.) начинается с Большой Буквы - данную сущность можно экспортировать (она передаваема в другие модули и пакеты)
	// Если имя сущности называется с маленькой буквы - данная сущность не экспортируемая. (нельзя передавать за пределы данного пакета)

	//6. Создадим теперь дополнительный пакет с прямоугольником
	// mkdie rectangle && cd rectangle && touch rectangle.go

	//7. Проставим альтернативные пути
	// Альтернативный путь определяет точку входа во ВСЕ  ПРИЛОЖЕНИЕ!!!
	// Для того, что его создать необходимо инициализировть файл GO.MOD
	//Дaнный файл будет отправной точкой для импортирования ВСЕХ ПАКЕТОВ ВНУТРИ ПРОЕКТА
	// go mod init <ProjectDirName>

	// Реализуем внутри rectangle структуру, метод и конструктор
	// 8. Попробуем импортировать все из пакета rectangle

	r := rectangle.New(10, 20, "green")
	fmt.Println("Perimeter:", r.Perimeter())

	// 9. Экспортируемость как инкапсууляция

	newR := rectangle.Rectangle{
		A: 2,
		B: 7,
	}

	fmt.Println(newR)
}
