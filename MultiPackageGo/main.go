package main

import (
	"MultiPackageGo/circle"
	"MultiPackageGo/rectangle"
	"fmt"
)

//1. Функция init() - данная функция отрабатывает единожды при первом импортировании пакета
//2. Данных функций в пакете может быть несколько штук! (т.к в одном модуле нельзя создать более одной функции с каким то определенным именем)

//3. Init() Вызывается в момент инициализации пакета
//* Данный пакет выглядит следующим образом:
//** сначала компилятор смотрит на содержимое пакета
//** затем компилятор  смотрит на пути импорта (если что-то импортируется ,компилятор уходит туда)
//** затем компилятор инициализирует переменные уровня пакета
//** затем компилятор запускает функцию init() для данного пакета
// ** повторяет данную процедуру для всех пакетов проекта
// ** после чего вызывается функция main()

//4. Что произойдет если запустить main.go
// *Сначала смотрим в main.go на предмет синтаксическмх ошибок, но ничего не иинициализируется
// *Затем импорты: сначала импортирует ModuleTest/rectangle
// **Компилятор идет в rectangle
// **Смотрим в пакет на предмет синтаксических ошибок
// ** Затем импорт fmt
// ** Затем инициализируем переменные уровня пакета
// ** Затем запускаем функцию init() пакета rectangle
// ** Затем подгружаем определяем все имена пакета rectangle
// ** Функции main тут нет, возвращаемся назад
// * Пытаемся импортировать fmt., (т.к. он уже был импортирован одним из пакетов - повторный импорт не требуется)
// * Инициализируем переменные уровня пакета main
// * Запускаем функцию init() в main()
// * Затем определяем имена (тут дополнительных имен нет, тут ничего не делаем)
// * Затем запускаем функцию main()

//5. Все импорты вне зависимости стандартные или пользовательские, сортируются по алфавиту
func init() {
	fmt.Println("Init function for main package")
	fmt.Println("Name:", name, "Age:", age)
}

var (
	name string = "Bob"
	age  int    = 11
)

func main() {
	r := rectangle.New(10, 10)
	fmt.Println(r)
	c := circle.New(22.5)
	fmt.Println(c)
}
